import { useState, useEffect } from "react"
import { 
  Bookmark, 
  Heart, 
  MessageCircle, 
  Share2, 
  X, 
  Calendar,
  Search,
  Filter
} from "lucide-react"
import { Avatar, AvatarFallback, AvatarImage } from "../../ui/avatar"
import { Button } from "../../ui/button"
import { Card, CardContent, CardHeader } from "../../ui/card"
import { Badge } from "../../ui/badge"
import { cn } from "../../../lib/utils"
import { showSuccessToast } from "../../../utils/toast"
import { PostDetail } from "./PostDetail"

// Mock saved posts data
const mockSavedPosts = [
  {
    id: 1,
    author: {
      name: "Ph√≤ng ƒê√†o T·∫°o", 
      fallback: "TR",
      avatarColor: "from-purple-500 to-pink-600",
      department: "Training Manager"
    },
    title: "[KH√ìA H·ªåC] CH∆Ø∆†NG TR√åNH ƒê√ÄO T·∫†O DIGITAL MARKETING 2025",
    content: "M·ªü ƒëƒÉng k√Ω kh√≥a h·ªçc Digital Marketing mi·ªÖn ph√≠ cho nh√¢n vi√™n! Th·ªùi gian: 3 tu·∫ßn, h·ªçc online. N·ªôi dung: SEO, SEM, Social Media Marketing, Email Marketing, Analytics...",
    image: "https://images.unsplash.com/photo-1516321318423-f06f85e504b3?w=800&h=450&fit=crop&crop=center",
    savedAt: "2 gi·ªù tr∆∞·ªõc",
    originalDate: "8 gi·ªù tr∆∞·ªõc",
    stats: { likes: 987, comments: 43, shares: 12 },
    tags: ["Digital Marketing", "Training", "Free Course"]
  },
  {
    id: 2,
    author: {
      name: "Ban Gi√°m ƒê·ªëc",
      fallback: "CEO", 
      avatarColor: "from-amber-500 to-orange-600",
      department: "Th√¥ng b√°o ch√≠nh th·ª©c"
    },
    title: "[TH√ÄNH T·ª∞U] C√îNG TY VINH DANH TOP 10 DOANH NGHI·ªÜP XU·∫§T S·∫ÆC",
    content: "Ch√∫ng t√¥i t·ª± h√†o th√¥ng b√°o r·∫±ng c√¥ng ty ƒë√£ ƒë∆∞·ª£c vinh danh trong danh s√°ch Top 10 doanh nghi·ªáp xu·∫•t s·∫Øc nƒÉm 2024. ƒê√¢y l√† th√†nh qu·∫£ c·ªßa s·ª± c·ªë g·∫Øng kh√¥ng ng·ª´ng c·ªßa t·∫•t c·∫£ c√°c th√†nh vi√™n. üéâ",
    image: "https://images.unsplash.com/photo-1552664730-d307ca884978?w=800&h=450&fit=crop&crop=center",
    savedAt: "1 ng√†y tr∆∞·ªõc",
    originalDate: "1 ng√†y tr∆∞·ªõc",
    stats: { likes: 5672, comments: 156, shares: 89 },
    tags: ["Achievement", "Company News", "Award"]
  },
  {
    id: 3,
    author: {
      name: "IT Department",
      fallback: "IT",
      avatarColor: "from-blue-500 to-cyan-600", 
      department: "Team Leader"
    },
    title: "[C·∫¨P NH·∫¨T] TRI·ªÇN KHAI H·ªÜ TH·ªêNG S-CONNECT M·ªöI",
    content: "H·ªá th·ªëng S-Connect ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t v·ªõi giao di·ªán m·ªõi hi·ªán ƒë·∫°i h∆°n! C√°c t√≠nh nƒÉng m·ªõi bao g·ªìm: Dark mode, Notification center, Real-time chat v√† nhi·ªÅu c·∫£i ti·∫øn kh√°c.",
    savedAt: "3 ng√†y tr∆∞·ªõc",
    originalDate: "6 gi·ªù tr∆∞·ªõc",
    stats: { likes: 1234, comments: 67, shares: 28 },
    tags: ["System Update", "S-Connect", "Technology"]
  }
]

export function SavedPosts() {
  const [savedPosts, setSavedPosts] = useState<any[]>([])
  const [searchTerm, setSearchTerm] = useState("")
  const [filterBy, setFilterBy] = useState("all") // all, recent, older
  const [, setCurrentTime] = useState(Date.now()) // Force re-render for time updates
  const [currentView, setCurrentView] = useState<'list' | 'detail'>('list')
  const [selectedPostId, setSelectedPostId] = useState<number | null>(null)
  const [postsStats, setPostsStats] = useState<{[key: number]: any}>({})

  // Load saved posts from localStorage
  useEffect(() => {
    const loadSavedPosts = () => {
      const saved = localStorage.getItem('savedPosts')
      const blacklist = JSON.parse(localStorage.getItem('unsavedMockPosts') || '[]')
      
      let allPosts: any[] = []
      
      // 1. Load t·ª´ localStorage tr∆∞·ªõc (b√†i th·∫≠t ng∆∞·ªùi d√πng l∆∞u)
      if (saved) {
        try {
          const parsedSaved = JSON.parse(saved)
          allPosts = [...parsedSaved] // B√†i ng∆∞·ªùi d√πng l∆∞u
        } catch (error) {
          console.error('Error loading saved posts:', error)
        }
      }
      
      // 2. Th√™m mock posts (tr·ª´ nh·ªØng c√°i ƒë√£ unsave)
      const filteredMockPosts = mockSavedPosts.filter(post => !blacklist.includes(post.id))
      const existingIds = allPosts.map(post => post.id)
      const newMockPosts = filteredMockPosts.filter(post => !existingIds.includes(post.id))
      
      // Merge: user posts first, then mock posts
      allPosts = [...allPosts, ...newMockPosts]
      
      // Sort theo th·ªùi gian l∆∞u (m·ªõi nh·∫•t l√™n ƒë·∫ßu)
      allPosts.sort((a, b) => {
        // ∆Øu ti√™n posts c√≥ savedTimestamp
        if (a.savedTimestamp && b.savedTimestamp) {
          return b.savedTimestamp - a.savedTimestamp
        }
        
        // N·∫øu kh√¥ng c√≥ timestamp, parse Vietnamese format
        const parseVietnameseDate = (dateStr: string) => {
          if (dateStr.includes('v·ª´a xong')) return Date.now()
          if (dateStr.includes('gi·ªù tr∆∞·ªõc')) {
            const hours = parseInt(dateStr.match(/\d+/)?.[0] || '0')
            return Date.now() - (hours * 60 * 60 * 1000)
          }
          if (dateStr.includes('ng√†y tr∆∞·ªõc')) {
            const days = parseInt(dateStr.match(/\d+/)?.[0] || '0')
            return Date.now() - (days * 24 * 60 * 60 * 1000)
          }
          return Date.now() - (24 * 60 * 60 * 1000) // Default: 1 ng√†y tr∆∞·ªõc
        }
        
        const timeA = a.savedTimestamp || parseVietnameseDate(a.savedAt || '')
        const timeB = b.savedTimestamp || parseVietnameseDate(b.savedAt || '')
        return timeB - timeA // M·ªõi nh·∫•t tr∆∞·ªõc
      })
      
      setSavedPosts(allPosts)
      console.log('üìã Loaded saved posts:', allPosts.length, 'posts')
      
      // Load stats for all posts
      loadStatsForPosts(allPosts)
    }
    loadSavedPosts()
  }, [])
  
  // Load real stats for all posts
  const loadStatsForPosts = async (posts: any[]) => {
    const statsMap: {[key: number]: any} = {}
    
    for (const post of posts) {
      if (post.id) {
        const realStats = await getRealStats(post.id, post.stats)
        statsMap[post.id] = realStats
      }
    }
    
    setPostsStats(statsMap)
    console.log('üìä Loaded stats for', Object.keys(statsMap).length, 'posts')
  }

  // Update time every minute for real-time display
  useEffect(() => {
    const timer = setInterval(() => {
      setCurrentTime(Date.now())
    }, 60000) // Update every minute

    return () => clearInterval(timer)
  }, [])

  const handleUnsavePost = (postId: number) => {
    // Remove t·ª´ state hi·ªán t·∫°i
    const updatedPosts = savedPosts.filter(post => post.id !== postId)
    setSavedPosts(updatedPosts)
    
    // Update localStorage - remove user saved posts
    const currentSaved = JSON.parse(localStorage.getItem('savedPosts') || '[]')
    const filteredSaved = currentSaved.filter((post: any) => post.id !== postId)
    localStorage.setItem('savedPosts', JSON.stringify(filteredSaved))
    
    // N·∫øu ƒë√¢y l√† mock post (ID 1-5), th√™m v√†o blacklist
    if (postId >= 1 && postId <= 5) {
      const blacklist = JSON.parse(localStorage.getItem('unsavedMockPosts') || '[]')
      if (!blacklist.includes(postId)) {
        blacklist.push(postId)
        localStorage.setItem('unsavedMockPosts', JSON.stringify(blacklist))
      }
    }
    
    // Show success message
    showSuccessToast('ƒê√£ x√≥a b√†i vi·∫øt kh·ªèi danh s√°ch ƒë√£ l∆∞u')
    console.log('üóëÔ∏è Removed post:', postId, 'Remaining:', updatedPosts.length)
  }

  const filteredPosts = (savedPosts || []).filter(post => {
    if (!post || !post.title || !post.content || !post.author) return false
    
    const matchesSearch = post.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         post.content.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         post.author.name.toLowerCase().includes(searchTerm.toLowerCase())
    
    if (filterBy === "recent") {
      if (post.savedTimestamp) {
        const hoursDiff = (Date.now() - post.savedTimestamp) / (1000 * 60 * 60)
        return matchesSearch && hoursDiff < 24 // Less than 24 hours
      }
      // Fallback to string matching for old format
      return matchesSearch && post.savedAt && (
        post.savedAt.includes("gi·ªù") || 
        post.savedAt.includes("ph√∫t") || 
        post.savedAt.includes("v·ª´a xong")
      )
    }
    if (filterBy === "older") {
      if (post.savedTimestamp) {
        const hoursDiff = (Date.now() - post.savedTimestamp) / (1000 * 60 * 60)
        return matchesSearch && hoursDiff >= 24 // 24+ hours ago
      }
      // Fallback to string matching for old format  
      return matchesSearch && post.savedAt && post.savedAt.includes("ng√†y")
    }
    
    return matchesSearch
  })

  const formatCount = (count: number | undefined): string => {
    // Handle undefined or null values
    if (count === undefined || count === null || isNaN(count)) {
      return '0'
    }
    
    if (count >= 1000000) {
      return `${(count / 1000000).toFixed(1)}M`
    }
    if (count >= 1000) {
      return `${(count / 1000).toFixed(1)}k`
    }
    return count.toString()
  }

  // Calculate relative time from timestamp
  const getRelativeTime = (timestamp: number): string => {
    const now = Date.now()
    const diff = now - timestamp
    
    const minutes = Math.floor(diff / (1000 * 60))
    const hours = Math.floor(diff / (1000 * 60 * 60))
    const days = Math.floor(diff / (1000 * 60 * 60 * 24))
    
    if (minutes < 1) return "v·ª´a xong"
    if (minutes < 60) return `${minutes} ph√∫t tr∆∞·ªõc`
    if (hours < 24) return `${hours} gi·ªù tr∆∞·ªõc`
    return `${days} ng√†y tr∆∞·ªõc`
  }

  // Get real stats for display - SYNCHRONIZED with NewsFeed/PostDetail
  const getRealStats = async (postId: number, originalStats: any) => {
    try {
      // Get real like count from localStorage
      const likeKey = `post_${postId}_liked`
      const countKey = `post_${postId}_like_count`
      const savedCount = localStorage.getItem(countKey)
      
      let likes = originalStats?.likes || 0
      if (savedCount) {
        likes = parseInt(savedCount) || 0
      }
      
      // Get real comment count from database API (same as NewsFeed/PostDetail)
      let comments = originalStats?.comments || 0
      try {
        const token = localStorage.getItem('token')
        if (token) {
          const response = await fetch('http://localhost:3001/api/posts/comment-counts', {
            headers: {
              'Authorization': `Bearer ${token}`,
              'Content-Type': 'application/json'
            }
          })
          
          if (response.ok) {
            const commentCounts = await response.json()
            if (commentCounts[postId]) {
              comments = commentCounts[postId].total || 0 // Use real comment count from database
            }
          }
        }
      } catch (error) {
        console.warn('Error fetching comment count from API for post', postId, error)
        // Fallback to localStorage if API fails
        const savedComments = localStorage.getItem(`comments_${postId}`)
        if (savedComments) {
          try {
            const parsedComments = JSON.parse(savedComments)
            comments = parsedComments.length || originalStats?.comments || 0
          } catch (e) {
            console.warn('Error parsing comments for post', postId)
            comments = originalStats?.comments || 0
          }
        }
      }
      
      return {
        likes: likes || 0,
        comments: comments || 0,
        shares: originalStats?.shares || 0
      }
    } catch (error) {
      console.warn('Error getting real stats for post', postId, error)
      return {
        likes: originalStats?.likes || 0,
        comments: originalStats?.comments || 0,
        shares: originalStats?.shares || 0
      }
    }
  }

  const handleViewPost = (postId: number) => {
    setSelectedPostId(postId)
    setCurrentView('detail')
  }

  const handleBackToList = () => {
    setCurrentView('list')
    setSelectedPostId(null)
  }

  // If viewing detail, render PostDetail
  if (currentView === 'detail' && selectedPostId) {
    return <PostDetail postId={selectedPostId.toString()} onBack={handleBackToList} />
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-violet-50/30 to-indigo-50/50">
      <div className="max-w-4xl mx-auto py-8 px-4 md:px-6">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center gap-3 mb-4">
            <div className="h-12 w-12 rounded-xl bg-gradient-to-br from-violet-500 to-indigo-600 flex items-center justify-center shadow-lg">
              <Bookmark className="h-6 w-6 text-white" />
            </div>
            <div>
              <h1 className="text-3xl font-bold text-slate-900">B√†i vi·∫øt ƒë√£ l∆∞u</h1>
              <p className="text-slate-600">T·∫•t c·∫£ b√†i vi·∫øt b·∫°n ƒë√£ ƒë√°nh d·∫•u ƒë·ªÉ ƒë·ªçc sau</p>
            </div>
          </div>

          {/* Search and Filter */}
          <div className="flex flex-col sm:flex-row gap-4">
            <div className="relative flex-1">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 h-4 w-4 z-10 pointer-events-none" />
              <input
                type="text"
                placeholder="T√¨m ki·∫øm b√†i vi·∫øt ƒë√£ l∆∞u..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-10 pr-4 py-3 rounded-xl border border-slate-200 focus:border-violet-300 focus:ring focus:ring-violet-100 transition-all relative z-20"
              />
            </div>
            <div className="flex gap-2">
              <Button
                variant={filterBy === "all" ? "default" : "outline"}
                size="sm"
                onClick={() => setFilterBy("all")}
                className={cn(
                  "rounded-xl",
                  filterBy === "all" 
                    ? "bg-gradient-to-r from-violet-500 to-indigo-600 hover:from-violet-600 hover:to-indigo-700" 
                    : "border-violet-200 text-violet-600 hover:bg-violet-50"
                )}
              >
                T·∫•t c·∫£ ({savedPosts?.length || 0})
              </Button>
              <Button
                variant={filterBy === "recent" ? "default" : "outline"}
                size="sm"
                onClick={() => setFilterBy("recent")}
                className={cn(
                  "rounded-xl",
                  filterBy === "recent" 
                    ? "bg-gradient-to-r from-violet-500 to-indigo-600 hover:from-violet-600 hover:to-indigo-700" 
                    : "border-violet-200 text-violet-600 hover:bg-violet-50"
                )}
              >
                G·∫ßn ƒë√¢y
              </Button>
              <Button
                variant={filterBy === "older" ? "default" : "outline"}
                size="sm"
                onClick={() => setFilterBy("older")}
                className={cn(
                  "rounded-xl",
                  filterBy === "older" 
                    ? "bg-gradient-to-r from-violet-500 to-indigo-600 hover:from-violet-600 hover:to-indigo-700" 
                    : "border-violet-200 text-violet-600 hover:bg-violet-50"
                )}
              >
                C≈© h∆°n
              </Button>
            </div>
          </div>
        </div>

        {/* Posts List */}
        {filteredPosts.length === 0 ? (
          <div className="text-center py-20">
            <div className="h-20 w-20 rounded-full bg-gradient-to-br from-violet-100 to-indigo-100 mx-auto mb-4 flex items-center justify-center">
              <Bookmark className="h-10 w-10 text-violet-600" />
            </div>
            <h3 className="text-xl font-semibold text-slate-700 mb-2">
              {searchTerm ? "Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt" : "Ch∆∞a c√≥ b√†i vi·∫øt ƒë√£ l∆∞u"}
            </h3>
            <p className="text-slate-500 max-w-md mx-auto">
              {searchTerm 
                ? `Kh√¥ng c√≥ b√†i vi·∫øt n√†o kh·ªõp v·ªõi "${searchTerm}"`
                : "B·∫Øt ƒë·∫ßu l∆∞u nh·ªØng b√†i vi·∫øt hay ƒë·ªÉ ƒë·ªçc l·∫°i sau!"
              }
            </p>
          </div>
        ) : (
          <div className="space-y-6">
            {filteredPosts.map((post) => (
              <Card key={post.id} className="overflow-hidden shadow-xl shadow-slate-200/50 backdrop-blur-sm bg-white/90 border-none hover:shadow-2xl transition-all duration-300">
                <CardContent className="p-0">
                  <div className="p-6">
                    {/* Post Header */}
                    <div className="flex items-start justify-between mb-4">
                      <div className="flex items-center gap-4">
                        <Avatar className={`h-12 w-12 border-2 border-white ring-2 ring-violet-100 shadow-lg`}>
                          <AvatarImage src="/placeholder.svg?height=48&width=48" alt={post.author.name} />
                          <AvatarFallback className={`bg-gradient-to-br ${post.author.avatarColor} text-white`}>
                            {post.author.fallback}
                          </AvatarFallback>
                        </Avatar>
                        <div>
                          <h3 className="font-bold text-slate-900">{post.author.name}</h3>
                          <p className="text-sm text-slate-500">{post.author.department} ‚Ä¢ {post.originalDate}</p>
                        </div>
                      </div>
                      
                      <div className="flex items-center gap-2">
                        <div className="flex items-center gap-2 text-sm text-slate-500">
                          <Calendar className="h-4 w-4" />
                          <span>L∆∞u {post.savedTimestamp ? getRelativeTime(post.savedTimestamp) : post.savedAt}</span>
                        </div>
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => handleUnsavePost(post.id)}
                          className="text-slate-500 hover:text-red-500 hover:bg-red-50 rounded-full h-8 w-8 p-0"
                        >
                          <X className="h-4 w-4" />
                        </Button>
                      </div>
                    </div>

                    {/* Post Content */}
                    <div className="space-y-4">
                      <h2 className="text-xl font-bold text-slate-900 leading-tight">{post.title}</h2>
                      <p className="text-slate-700 leading-relaxed">{post.content}</p>
                      
                                            {/* Tags */}
                      {post.tags && post.tags.length > 0 && (
                        <div className="flex flex-wrap gap-2">
                          {post.tags.map((tag: string, index: number) => (
                            <Badge
                              key={index}
                              variant="secondary"
                              className="bg-gradient-to-r from-violet-100 to-indigo-100 text-violet-700 hover:from-violet-200 hover:to-indigo-200 border-none"
                            >
                              {tag}
                            </Badge>
                          ))}
                        </div>
                      )}
                    </div>

                    {/* Post Image */}
                    {(post.image || post.images) && (
                      <div className="mt-4 relative aspect-[16/9] bg-slate-100 overflow-hidden rounded-xl shadow-lg">
                        <img
                          src={post.image?.src || post.image || (post.images && post.images[0]?.src)}
                          alt={post.image?.alt || "Post image"}
                          className="w-full h-full object-cover hover:scale-105 transition-transform duration-700"
                        />
                        <div className="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent"></div>
                      </div>
                    )}

                    {/* Post Stats */}
                    <div className="mt-6 flex items-center justify-between pt-4 border-t border-slate-100">
                      <div className="flex items-center gap-6 text-sm text-slate-500">
                        {(() => {
                          const realStats = postsStats[post.id] || post.stats || {}
                          return (
                            <>
                              <div className="flex items-center gap-1">
                                <Heart className="h-4 w-4" />
                                <span>{formatCount(realStats.likes)}</span>
                              </div>
                              <div className="flex items-center gap-1">
                                <MessageCircle className="h-4 w-4" />
                                <span>{formatCount(realStats.comments)}</span>
                              </div>
                              <div className="flex items-center gap-1">
                                <Share2 className="h-4 w-4" />
                                <span>{formatCount(realStats.shares)}</span>
                              </div>
                            </>
                          )
                        })()}
                      </div>
                      
                      <Button 
                        variant="outline" 
                        size="sm"
                        onClick={() => handleViewPost(post.id)}
                        className="border-violet-200 text-violet-600 hover:bg-violet-50 rounded-xl"
                      >
                        Xem b√†i vi·∫øt
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        )}
      </div>
    </div>
  )
} 